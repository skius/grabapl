"use strict";
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_r_r_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/r/r.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/r/r.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/


// src/basic-languages/r/r.ts
var conf = {
  comments: {
    lineComment: "#"
  },
  brackets: [
    ["{", "}"],
    ["[", "]"],
    ["(", ")"]
  ],
  autoClosingPairs: [
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" },
    { open: '"', close: '"' }
  ],
  surroundingPairs: [
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" },
    { open: '"', close: '"' }
  ]
};
var language = {
  defaultToken: "",
  tokenPostfix: ".r",
  roxygen: [
    "@alias",
    "@aliases",
    "@assignee",
    "@author",
    "@backref",
    "@callGraph",
    "@callGraphDepth",
    "@callGraphPrimitives",
    "@concept",
    "@describeIn",
    "@description",
    "@details",
    "@docType",
    "@encoding",
    "@evalNamespace",
    "@evalRd",
    "@example",
    "@examples",
    "@export",
    "@exportClass",
    "@exportMethod",
    "@exportPattern",
    "@family",
    "@field",
    "@formals",
    "@format",
    "@import",
    "@importClassesFrom",
    "@importFrom",
    "@importMethodsFrom",
    "@include",
    "@inherit",
    "@inheritDotParams",
    "@inheritParams",
    "@inheritSection",
    "@keywords",
    "@md",
    "@method",
    "@name",
    "@noMd",
    "@noRd",
    "@note",
    "@param",
    "@rawNamespace",
    "@rawRd",
    "@rdname",
    "@references",
    "@return",
    "@S3method",
    "@section",
    "@seealso",
    "@setClass",
    "@slot",
    "@source",
    "@template",
    "@templateVar",
    "@title",
    "@TODO",
    "@usage",
    "@useDynLib"
  ],
  constants: [
    "NULL",
    "FALSE",
    "TRUE",
    "NA",
    "Inf",
    "NaN",
    "NA_integer_",
    "NA_real_",
    "NA_complex_",
    "NA_character_",
    "T",
    "F",
    "LETTERS",
    "letters",
    "month.abb",
    "month.name",
    "pi",
    "R.version.string"
  ],
  keywords: [
    "break",
    "next",
    "return",
    "if",
    "else",
    "for",
    "in",
    "repeat",
    "while",
    "array",
    "category",
    "character",
    "complex",
    "double",
    "function",
    "integer",
    "list",
    "logical",
    "matrix",
    "numeric",
    "vector",
    "data.frame",
    "factor",
    "library",
    "require",
    "attach",
    "detach",
    "source"
  ],
  special: ["\\n", "\\r", "\\t", "\\b", "\\a", "\\f", "\\v", "\\'", '\\"', "\\\\"],
  brackets: [
    { open: "{", close: "}", token: "delimiter.curly" },
    { open: "[", close: "]", token: "delimiter.bracket" },
    { open: "(", close: ")", token: "delimiter.parenthesis" }
  ],
  tokenizer: {
    root: [
      { include: "@numbers" },
      { include: "@strings" },
      [/[{}\[\]()]/, "@brackets"],
      { include: "@operators" },
      [/#'$/, "comment.doc"],
      [/#'/, "comment.doc", "@roxygen"],
      [/(^#.*$)/, "comment"],
      [/\s+/, "white"],
      [/[,:;]/, "delimiter"],
      [/@[a-zA-Z]\w*/, "tag"],
      [
        /[a-zA-Z]\w*/,
        {
          cases: {
            "@keywords": "keyword",
            "@constants": "constant",
            "@default": "identifier"
          }
        }
      ]
    ],
    // Recognize Roxygen comments
    roxygen: [
      [
        /@\w+/,
        {
          cases: {
            "@roxygen": "tag",
            "@eos": { token: "comment.doc", next: "@pop" },
            "@default": "comment.doc"
          }
        }
      ],
      [
        /\s+/,
        {
          cases: {
            "@eos": { token: "comment.doc", next: "@pop" },
            "@default": "comment.doc"
          }
        }
      ],
      [/.*/, { token: "comment.doc", next: "@pop" }]
    ],
    // Recognize positives, negatives, decimals, imaginaries, and scientific notation
    numbers: [
      [/0[xX][0-9a-fA-F]+/, "number.hex"],
      [/-?(\d*\.)?\d+([eE][+\-]?\d+)?/, "number"]
    ],
    // Recognize operators
    operators: [
      [/<{1,2}-/, "operator"],
      [/->{1,2}/, "operator"],
      [/%[^%\s]+%/, "operator"],
      [/\*\*/, "operator"],
      [/%%/, "operator"],
      [/&&/, "operator"],
      [/\|\|/, "operator"],
      [/<</, "operator"],
      [/>>/, "operator"],
      [/[-+=&|!<>^~*/:$]/, "operator"]
    ],
    // Recognize strings, including those broken across lines
    strings: [
      [/'/, "string.escape", "@stringBody"],
      [/"/, "string.escape", "@dblStringBody"]
    ],
    stringBody: [
      [
        /\\./,
        {
          cases: {
            "@special": "string",
            "@default": "error-token"
          }
        }
      ],
      [/'/, "string.escape", "@popall"],
      [/./, "string"]
    ],
    dblStringBody: [
      [
        /\\./,
        {
          cases: {
            "@special": "string",
            "@default": "error-token"
          }
        }
      ],
      [/"/, "string.escape", "@popall"],
      [/./, "string"]
    ]
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jbHVkZV9ub2RlX21vZHVsZXNfbW9uYWNvLWVkaXRvcl9lc21fdnNfYmFzaWMtbGFuZ3VhZ2VzX3Jfcl9qcy5lNWFiMDFiM2Y2ZTE0ZmI2OGMwMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEtBQUs7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sUUFBUSxZQUFZLEdBQUc7QUFDN0IsTUFBTSx1QkFBdUI7QUFDN0IsTUFBTSx1QkFBdUI7QUFDN0IsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNLFFBQVEsWUFBWSxHQUFHO0FBQzdCLE1BQU0sdUJBQXVCO0FBQzdCLE1BQU0sdUJBQXVCO0FBQzdCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxRQUFRLFlBQVksNkJBQTZCO0FBQ3ZELE1BQU0sbURBQW1EO0FBQ3pELE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFCQUFxQjtBQUM3QixRQUFRLHFCQUFxQjtBQUM3QixXQUFXO0FBQ1gsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0NBQW9DO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0NBQW9DO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsSUFBSTtBQUNkLFdBQVcsSUFBSTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3JlYXRlLXdhc20tYXBwLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9yL3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVmVyc2lvbjogMC41Mi4yKDQwNDU0NWJkZWQxZGY2ZmZhNDFlYTBhZjRlOGRkYjIxOTAxOGM2YzEpXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbW9uYWNvLWVkaXRvci9ibG9iL21haW4vTElDRU5TRS50eHRcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbi8vIHNyYy9iYXNpYy1sYW5ndWFnZXMvci9yLnRzXG52YXIgY29uZiA9IHtcbiAgY29tbWVudHM6IHtcbiAgICBsaW5lQ29tbWVudDogXCIjXCJcbiAgfSxcbiAgYnJhY2tldHM6IFtcbiAgICBbXCJ7XCIsIFwifVwiXSxcbiAgICBbXCJbXCIsIFwiXVwiXSxcbiAgICBbXCIoXCIsIFwiKVwiXVxuICBdLFxuICBhdXRvQ2xvc2luZ1BhaXJzOiBbXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiIH0sXG4gICAgeyBvcGVuOiBcIltcIiwgY2xvc2U6IFwiXVwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiIH0sXG4gICAgeyBvcGVuOiAnXCInLCBjbG9zZTogJ1wiJyB9XG4gIF0sXG4gIHN1cnJvdW5kaW5nUGFpcnM6IFtcbiAgICB7IG9wZW46IFwie1wiLCBjbG9zZTogXCJ9XCIgfSxcbiAgICB7IG9wZW46IFwiW1wiLCBjbG9zZTogXCJdXCIgfSxcbiAgICB7IG9wZW46IFwiKFwiLCBjbG9zZTogXCIpXCIgfSxcbiAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH1cbiAgXVxufTtcbnZhciBsYW5ndWFnZSA9IHtcbiAgZGVmYXVsdFRva2VuOiBcIlwiLFxuICB0b2tlblBvc3RmaXg6IFwiLnJcIixcbiAgcm94eWdlbjogW1xuICAgIFwiQGFsaWFzXCIsXG4gICAgXCJAYWxpYXNlc1wiLFxuICAgIFwiQGFzc2lnbmVlXCIsXG4gICAgXCJAYXV0aG9yXCIsXG4gICAgXCJAYmFja3JlZlwiLFxuICAgIFwiQGNhbGxHcmFwaFwiLFxuICAgIFwiQGNhbGxHcmFwaERlcHRoXCIsXG4gICAgXCJAY2FsbEdyYXBoUHJpbWl0aXZlc1wiLFxuICAgIFwiQGNvbmNlcHRcIixcbiAgICBcIkBkZXNjcmliZUluXCIsXG4gICAgXCJAZGVzY3JpcHRpb25cIixcbiAgICBcIkBkZXRhaWxzXCIsXG4gICAgXCJAZG9jVHlwZVwiLFxuICAgIFwiQGVuY29kaW5nXCIsXG4gICAgXCJAZXZhbE5hbWVzcGFjZVwiLFxuICAgIFwiQGV2YWxSZFwiLFxuICAgIFwiQGV4YW1wbGVcIixcbiAgICBcIkBleGFtcGxlc1wiLFxuICAgIFwiQGV4cG9ydFwiLFxuICAgIFwiQGV4cG9ydENsYXNzXCIsXG4gICAgXCJAZXhwb3J0TWV0aG9kXCIsXG4gICAgXCJAZXhwb3J0UGF0dGVyblwiLFxuICAgIFwiQGZhbWlseVwiLFxuICAgIFwiQGZpZWxkXCIsXG4gICAgXCJAZm9ybWFsc1wiLFxuICAgIFwiQGZvcm1hdFwiLFxuICAgIFwiQGltcG9ydFwiLFxuICAgIFwiQGltcG9ydENsYXNzZXNGcm9tXCIsXG4gICAgXCJAaW1wb3J0RnJvbVwiLFxuICAgIFwiQGltcG9ydE1ldGhvZHNGcm9tXCIsXG4gICAgXCJAaW5jbHVkZVwiLFxuICAgIFwiQGluaGVyaXRcIixcbiAgICBcIkBpbmhlcml0RG90UGFyYW1zXCIsXG4gICAgXCJAaW5oZXJpdFBhcmFtc1wiLFxuICAgIFwiQGluaGVyaXRTZWN0aW9uXCIsXG4gICAgXCJAa2V5d29yZHNcIixcbiAgICBcIkBtZFwiLFxuICAgIFwiQG1ldGhvZFwiLFxuICAgIFwiQG5hbWVcIixcbiAgICBcIkBub01kXCIsXG4gICAgXCJAbm9SZFwiLFxuICAgIFwiQG5vdGVcIixcbiAgICBcIkBwYXJhbVwiLFxuICAgIFwiQHJhd05hbWVzcGFjZVwiLFxuICAgIFwiQHJhd1JkXCIsXG4gICAgXCJAcmRuYW1lXCIsXG4gICAgXCJAcmVmZXJlbmNlc1wiLFxuICAgIFwiQHJldHVyblwiLFxuICAgIFwiQFMzbWV0aG9kXCIsXG4gICAgXCJAc2VjdGlvblwiLFxuICAgIFwiQHNlZWFsc29cIixcbiAgICBcIkBzZXRDbGFzc1wiLFxuICAgIFwiQHNsb3RcIixcbiAgICBcIkBzb3VyY2VcIixcbiAgICBcIkB0ZW1wbGF0ZVwiLFxuICAgIFwiQHRlbXBsYXRlVmFyXCIsXG4gICAgXCJAdGl0bGVcIixcbiAgICBcIkBUT0RPXCIsXG4gICAgXCJAdXNhZ2VcIixcbiAgICBcIkB1c2VEeW5MaWJcIlxuICBdLFxuICBjb25zdGFudHM6IFtcbiAgICBcIk5VTExcIixcbiAgICBcIkZBTFNFXCIsXG4gICAgXCJUUlVFXCIsXG4gICAgXCJOQVwiLFxuICAgIFwiSW5mXCIsXG4gICAgXCJOYU5cIixcbiAgICBcIk5BX2ludGVnZXJfXCIsXG4gICAgXCJOQV9yZWFsX1wiLFxuICAgIFwiTkFfY29tcGxleF9cIixcbiAgICBcIk5BX2NoYXJhY3Rlcl9cIixcbiAgICBcIlRcIixcbiAgICBcIkZcIixcbiAgICBcIkxFVFRFUlNcIixcbiAgICBcImxldHRlcnNcIixcbiAgICBcIm1vbnRoLmFiYlwiLFxuICAgIFwibW9udGgubmFtZVwiLFxuICAgIFwicGlcIixcbiAgICBcIlIudmVyc2lvbi5zdHJpbmdcIlxuICBdLFxuICBrZXl3b3JkczogW1xuICAgIFwiYnJlYWtcIixcbiAgICBcIm5leHRcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwiaWZcIixcbiAgICBcImVsc2VcIixcbiAgICBcImZvclwiLFxuICAgIFwiaW5cIixcbiAgICBcInJlcGVhdFwiLFxuICAgIFwid2hpbGVcIixcbiAgICBcImFycmF5XCIsXG4gICAgXCJjYXRlZ29yeVwiLFxuICAgIFwiY2hhcmFjdGVyXCIsXG4gICAgXCJjb21wbGV4XCIsXG4gICAgXCJkb3VibGVcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJpbnRlZ2VyXCIsXG4gICAgXCJsaXN0XCIsXG4gICAgXCJsb2dpY2FsXCIsXG4gICAgXCJtYXRyaXhcIixcbiAgICBcIm51bWVyaWNcIixcbiAgICBcInZlY3RvclwiLFxuICAgIFwiZGF0YS5mcmFtZVwiLFxuICAgIFwiZmFjdG9yXCIsXG4gICAgXCJsaWJyYXJ5XCIsXG4gICAgXCJyZXF1aXJlXCIsXG4gICAgXCJhdHRhY2hcIixcbiAgICBcImRldGFjaFwiLFxuICAgIFwic291cmNlXCJcbiAgXSxcbiAgc3BlY2lhbDogW1wiXFxcXG5cIiwgXCJcXFxcclwiLCBcIlxcXFx0XCIsIFwiXFxcXGJcIiwgXCJcXFxcYVwiLCBcIlxcXFxmXCIsIFwiXFxcXHZcIiwgXCJcXFxcJ1wiLCAnXFxcXFwiJywgXCJcXFxcXFxcXFwiXSxcbiAgYnJhY2tldHM6IFtcbiAgICB7IG9wZW46IFwie1wiLCBjbG9zZTogXCJ9XCIsIHRva2VuOiBcImRlbGltaXRlci5jdXJseVwiIH0sXG4gICAgeyBvcGVuOiBcIltcIiwgY2xvc2U6IFwiXVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIuYnJhY2tldFwiIH0sXG4gICAgeyBvcGVuOiBcIihcIiwgY2xvc2U6IFwiKVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIucGFyZW50aGVzaXNcIiB9XG4gIF0sXG4gIHRva2VuaXplcjoge1xuICAgIHJvb3Q6IFtcbiAgICAgIHsgaW5jbHVkZTogXCJAbnVtYmVyc1wiIH0sXG4gICAgICB7IGluY2x1ZGU6IFwiQHN0cmluZ3NcIiB9LFxuICAgICAgWy9be31cXFtcXF0oKV0vLCBcIkBicmFja2V0c1wiXSxcbiAgICAgIHsgaW5jbHVkZTogXCJAb3BlcmF0b3JzXCIgfSxcbiAgICAgIFsvIyckLywgXCJjb21tZW50LmRvY1wiXSxcbiAgICAgIFsvIycvLCBcImNvbW1lbnQuZG9jXCIsIFwiQHJveHlnZW5cIl0sXG4gICAgICBbLyheIy4qJCkvLCBcImNvbW1lbnRcIl0sXG4gICAgICBbL1xccysvLCBcIndoaXRlXCJdLFxuICAgICAgWy9bLDo7XS8sIFwiZGVsaW1pdGVyXCJdLFxuICAgICAgWy9AW2EtekEtWl1cXHcqLywgXCJ0YWdcIl0sXG4gICAgICBbXG4gICAgICAgIC9bYS16QS1aXVxcdyovLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQGtleXdvcmRzXCI6IFwia2V5d29yZFwiLFxuICAgICAgICAgICAgXCJAY29uc3RhbnRzXCI6IFwiY29uc3RhbnRcIixcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJpZGVudGlmaWVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICBdLFxuICAgIC8vIFJlY29nbml6ZSBSb3h5Z2VuIGNvbW1lbnRzXG4gICAgcm94eWdlbjogW1xuICAgICAgW1xuICAgICAgICAvQFxcdysvLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQHJveHlnZW5cIjogXCJ0YWdcIixcbiAgICAgICAgICAgIFwiQGVvc1wiOiB7IHRva2VuOiBcImNvbW1lbnQuZG9jXCIsIG5leHQ6IFwiQHBvcFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwiY29tbWVudC5kb2NcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgL1xccysvLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQGVvc1wiOiB7IHRva2VuOiBcImNvbW1lbnQuZG9jXCIsIG5leHQ6IFwiQHBvcFwiIH0sXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwiY29tbWVudC5kb2NcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFsvLiovLCB7IHRva2VuOiBcImNvbW1lbnQuZG9jXCIsIG5leHQ6IFwiQHBvcFwiIH1dXG4gICAgXSxcbiAgICAvLyBSZWNvZ25pemUgcG9zaXRpdmVzLCBuZWdhdGl2ZXMsIGRlY2ltYWxzLCBpbWFnaW5hcmllcywgYW5kIHNjaWVudGlmaWMgbm90YXRpb25cbiAgICBudW1iZXJzOiBbXG4gICAgICBbLzBbeFhdWzAtOWEtZkEtRl0rLywgXCJudW1iZXIuaGV4XCJdLFxuICAgICAgWy8tPyhcXGQqXFwuKT9cXGQrKFtlRV1bK1xcLV0/XFxkKyk/LywgXCJudW1iZXJcIl1cbiAgICBdLFxuICAgIC8vIFJlY29nbml6ZSBvcGVyYXRvcnNcbiAgICBvcGVyYXRvcnM6IFtcbiAgICAgIFsvPHsxLDJ9LS8sIFwib3BlcmF0b3JcIl0sXG4gICAgICBbLy0+ezEsMn0vLCBcIm9wZXJhdG9yXCJdLFxuICAgICAgWy8lW14lXFxzXSslLywgXCJvcGVyYXRvclwiXSxcbiAgICAgIFsvXFwqXFwqLywgXCJvcGVyYXRvclwiXSxcbiAgICAgIFsvJSUvLCBcIm9wZXJhdG9yXCJdLFxuICAgICAgWy8mJi8sIFwib3BlcmF0b3JcIl0sXG4gICAgICBbL1xcfFxcfC8sIFwib3BlcmF0b3JcIl0sXG4gICAgICBbLzw8LywgXCJvcGVyYXRvclwiXSxcbiAgICAgIFsvPj4vLCBcIm9wZXJhdG9yXCJdLFxuICAgICAgWy9bLSs9JnwhPD5efiovOiRdLywgXCJvcGVyYXRvclwiXVxuICAgIF0sXG4gICAgLy8gUmVjb2duaXplIHN0cmluZ3MsIGluY2x1ZGluZyB0aG9zZSBicm9rZW4gYWNyb3NzIGxpbmVzXG4gICAgc3RyaW5nczogW1xuICAgICAgWy8nLywgXCJzdHJpbmcuZXNjYXBlXCIsIFwiQHN0cmluZ0JvZHlcIl0sXG4gICAgICBbL1wiLywgXCJzdHJpbmcuZXNjYXBlXCIsIFwiQGRibFN0cmluZ0JvZHlcIl1cbiAgICBdLFxuICAgIHN0cmluZ0JvZHk6IFtcbiAgICAgIFtcbiAgICAgICAgL1xcXFwuLyxcbiAgICAgICAge1xuICAgICAgICAgIGNhc2VzOiB7XG4gICAgICAgICAgICBcIkBzcGVjaWFsXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwiZXJyb3ItdG9rZW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nLmVzY2FwZVwiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbLy4vLCBcInN0cmluZ1wiXVxuICAgIF0sXG4gICAgZGJsU3RyaW5nQm9keTogW1xuICAgICAgW1xuICAgICAgICAvXFxcXC4vLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQHNwZWNpYWxcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJlcnJvci10b2tlblwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgWy9cIi8sIFwic3RyaW5nLmVzY2FwZVwiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbLy4vLCBcInN0cmluZ1wiXVxuICAgIF1cbiAgfVxufTtcbmV4cG9ydCB7XG4gIGNvbmYsXG4gIGxhbmd1YWdlXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9