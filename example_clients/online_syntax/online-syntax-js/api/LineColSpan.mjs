// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";



export class LineColSpan {
    #lineStart;
    get lineStart() {
        return this.#lineStart;
    }
    set lineStart(value){
        this.#lineStart = value;
    }
    #lineEnd;
    get lineEnd() {
        return this.#lineEnd;
    }
    set lineEnd(value){
        this.#lineEnd = value;
    }
    #colStart;
    get colStart() {
        return this.#colStart;
    }
    set colStart(value){
        this.#colStart = value;
    }
    #colEnd;
    get colEnd() {
        return this.#colEnd;
    }
    set colEnd(value){
        this.#colEnd = value;
    }
    /** @internal */
    static fromFields(structObj) {
        return new LineColSpan(structObj);
    }

    #internalConstructor(structObj) {
        if (typeof structObj !== "object") {
            throw new Error("LineColSpan's constructor takes an object of LineColSpan's fields.");
        }

        if ("lineStart" in structObj) {
            this.#lineStart = structObj.lineStart;
        } else {
            throw new Error("Missing required field lineStart.");
        }

        if ("lineEnd" in structObj) {
            this.#lineEnd = structObj.lineEnd;
        } else {
            throw new Error("Missing required field lineEnd.");
        }

        if ("colStart" in structObj) {
            this.#colStart = structObj.colStart;
        } else {
            throw new Error("Missing required field colStart.");
        }

        if ("colEnd" in structObj) {
            this.#colEnd = structObj.colEnd;
        } else {
            throw new Error("Missing required field colEnd.");
        }

        return this;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    _intoFFI(
        functionCleanupArena,
        appendArrayMap
    ) {
        return [this.#lineStart, this.#lineEnd, this.#colStart, this.#colEnd]
    }

    static _fromSuppliedValue(internalConstructor, obj) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("_fromSuppliedValue cannot be called externally.");
        }

        if (obj instanceof LineColSpan) {
            return obj;
        }

        return LineColSpan.fromFields(obj);
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap
    ) {
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, this.#lineStart, Uint32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 4, this.#lineEnd, Uint32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 8, this.#colStart, Uint32Array);
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 12, this.#colEnd, Uint32Array);
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    static _fromFFI(internalConstructor, ptr) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("LineColSpan._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        let structObj = {};
        const lineStartDeref = (new Uint32Array(wasm.memory.buffer, ptr, 1))[0];
        structObj.lineStart = lineStartDeref;
        const lineEndDeref = (new Uint32Array(wasm.memory.buffer, ptr + 4, 1))[0];
        structObj.lineEnd = lineEndDeref;
        const colStartDeref = (new Uint32Array(wasm.memory.buffer, ptr + 8, 1))[0];
        structObj.colStart = colStartDeref;
        const colEndDeref = (new Uint32Array(wasm.memory.buffer, ptr + 12, 1))[0];
        structObj.colEnd = colEndDeref;

        return new LineColSpan(structObj);
    }


    constructor(structObj) {
        return this.#internalConstructor(...arguments)
    }
}