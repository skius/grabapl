// generated by diplomat-tool
import type { ConcreteGraph } from "./ConcreteGraph"
import type { LineColSpansIter } from "./LineColSpansIter"
import type { NewNodesIter } from "./NewNodesIter"
import type { StringError } from "./StringError"
import type { StringIter } from "./StringIter"
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";



export class ParseResult {
    /** @internal */
    get ffiValue(): pointer;
    /** @internal */
    constructor();


    /**
     * Writes the error message if one exists.
     */
    errorMessage(): string;

    /**
     * Returns an interable of error spans (if any).
     */
    errorSpans(): LineColSpansIter;

    /**
     * Returns the DOT representation of the intermediate state named `state`.
     */
    dotOfState(state: string): string;

    /**
     * Lists the available states.
     */
    listStates(): StringIter;

    /**
     * Lists the available operations.
     */
    listOperations(): StringIter;

    /**
     * Runs the operation with the given name and arguments on the provided concrete graph.
     */
    runOperation(g: ConcreteGraph, opName: string, args: Array<number>): NewNodesIter;
}