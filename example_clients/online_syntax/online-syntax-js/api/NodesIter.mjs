// generated by diplomat-tool
import { NodeWrapper } from "./NodeWrapper.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const NodesIter_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.NodesIter_destroy(ptr);
});

export class NodesIter {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("NodesIter is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            NodesIter_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    #iteratorNext() {

        const result = wasm.NodesIter_next(this.ffiValue);

        try {
            return result === 0 ? null : new NodeWrapper(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    [Symbol.iterator]() {

        const result = wasm.NodesIter_to_iterable(this.ffiValue);

        try {
            return new NodesIter(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    next(){
        const out = this.#iteratorNext();

        return {
            value: out,
            done: out === null,
        };
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}