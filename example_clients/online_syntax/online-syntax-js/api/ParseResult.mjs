// generated by diplomat-tool
import { ConcreteGraph } from "./ConcreteGraph.mjs"
import { LineColSpansIter } from "./LineColSpansIter.mjs"
import { NewNodesIter } from "./NewNodesIter.mjs"
import { StringError } from "./StringError.mjs"
import { StringIter } from "./StringIter.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const ParseResult_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ParseResult_destroy(ptr);
});

export class ParseResult {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("ParseResult is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            ParseResult_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Writes the error message if one exists.
     */
    errorMessage() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.ParseResult_error_message(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Returns an interable of error spans (if any).
     */
    errorSpans() {

        const result = wasm.ParseResult_error_spans(this.ffiValue);

        try {
            return new LineColSpansIter(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Returns the DOT representation of the intermediate state named `state`.
     */
    dotOfState(state) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const stateSlice = diplomatRuntime.DiplomatBuf.str8(wasm, state);
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.ParseResult_dot_of_state(this.ffiValue, ...stateSlice.splat(), write.buffer);

        try {
            return write.readString8();
        }

        finally {
            functionCleanupArena.free();

            write.free();
        }
    }

    /**
     * Lists the available states.
     */
    listStates() {

        const result = wasm.ParseResult_list_states(this.ffiValue);

        try {
            return new StringIter(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Lists the available operations.
     */
    listOperations() {

        const result = wasm.ParseResult_list_operations(this.ffiValue);

        try {
            return new StringIter(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Runs the operation with the given name and arguments on the provided concrete graph.
     */
    runOperation(g, opName, args) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const opNameSlice = diplomatRuntime.DiplomatBuf.str8(wasm, opName);
        const argsSlice = diplomatRuntime.DiplomatBuf.slice(wasm, args, "u32");
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.ParseResult_run_operation(diplomatReceive.buffer, this.ffiValue, g.ffiValue, ...opNameSlice.splat(), ...argsSlice.splat());

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new StringError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('StringError: ' + cause.toString(), { cause });
            }
            return new NewNodesIter(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}