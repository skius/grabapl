/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const AbstractArgList_create: () => number;
export const AbstractArgList_push: (a: number, b: number) => void;
export const AbstractArgList_destroy: (a: number) => void;
export const AbstractGraph_destroy: (a: number) => void;
export const AbstractNodeId_new_parameter: (a: number, b: number) => number;
export const AbstractNodeId_new_from_output: (a: number, b: number, c: number, d: number) => number;
export const AbstractNodeId_new_from_str: (a: number, b: number) => number;
export const AbstractNodeId_destroy: (a: number) => void;
export const BuilderOpLike_new_from_id: (a: number) => number;
export const BuilderOpLike_new_recurse: () => number;
export const BuilderOpLike_new_add_node: () => number;
export const BuilderOpLike_new_add_edge: () => number;
export const BuilderOpLike_new_set_edge_value: (a: number, b: number) => number;
export const BuilderOpLike_destroy: (a: number) => void;
export const BuiltinQuery_new_is_value_gt: (a: number) => number;
export const BuiltinQuery_new_is_value_eq: (a: number) => number;
export const BuiltinQuery_new_values_equal: () => number;
export const BuiltinQuery_new_first_gt_snd: () => number;
export const BuiltinQuery_destroy: (a: number) => void;
export const ConcreteGraph_create: () => number;
export const ConcreteGraph_add_node: (a: number, b: number) => number;
export const ConcreteGraph_add_edge: (a: number, b: number, c: number, d: number, e: number) => void;
export const ConcreteGraph_say_hi: (a: number) => void;
export const ConcreteGraph_destroy: (a: number) => void;
export const DotCollector_create: () => number;
export const DotCollector_collect: (a: number, b: number) => void;
export const DotCollector_get_dot: (a: number, b: number) => void;
export const DotCollector_destroy: (a: number) => void;
export const EdgeAbstract_new_wildcard: () => number;
export const EdgeAbstract_new_exact: (a: number, b: number) => number;
export const EdgeAbstract_destroy: (a: number) => void;
export const IntermediateState_get_dot: (a: number, b: number) => void;
export const IntermediateState_available_aids: (a: number, b: number) => void;
export const IntermediateState_query_context: (a: number, b: number) => void;
export const IntermediateState_destroy: (a: number) => void;
export const OpCtx_create: () => number;
export const OpCtx_add_custom_operation: (a: number, b: number, c: number) => void;
export const OpCtx_custom_op_to_json: (a: number, b: number, c: number) => void;
export const OpCtx_destroy: (a: number) => void;
export const OperationBuilder_create: (a: number, b: number) => number;
export const OperationBuilder_expect_parameter_node: (a: number, b: number, c: number, d: number) => void;
export const OperationBuilder_expect_context_node: (a: number, b: number, c: number, d: number) => void;
export const OperationBuilder_expect_parameter_edge: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
export const OperationBuilder_start_query: (a: number, b: number, c: number, d: number) => void;
export const OperationBuilder_enter_true_branch: (a: number, b: number) => void;
export const OperationBuilder_enter_false_branch: (a: number, b: number) => void;
export const OperationBuilder_start_shape_query: (a: number, b: number, c: number, d: number) => void;
export const OperationBuilder_end_query: (a: number, b: number) => void;
export const OperationBuilder_expect_shape_node: (a: number, b: number, c: number, d: number) => void;
export const OperationBuilder_expect_shape_edge: (a: number, b: number, c: number, d: number, e: number) => void;
export const OperationBuilder_add_operation: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
export const OperationBuilder_rename_node: (a: number, b: number, c: number, d: number, e: number) => void;
export const OperationBuilder_show: (a: number, b: number) => void;
export const OperationBuilder_finalize: (a: number, b: number) => void;
export const OperationBuilder_destroy: (a: number) => void;
export const OperationBuilderError_message: (a: number, b: number) => void;
export const OperationBuilderError_destroy: (a: number) => void;
export const Runner_create: () => number;
export const Runner_run: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const Runner_destroy: (a: number) => void;
export const UserDefinedOperation_destroy: (a: number) => void;
export const diplomat_init: () => void;
export const diplomat_simple_write: (a: number, b: number, c: number) => void;
export const diplomat_buffer_write_create: (a: number) => number;
export const diplomat_buffer_write_get_bytes: (a: number) => number;
export const diplomat_buffer_write_len: (a: number) => number;
export const diplomat_buffer_write_destroy: (a: number) => void;
export const diplomat_alloc: (a: number, b: number) => number;
export const diplomat_free: (a: number, b: number, c: number) => void;
export const diplomat_is_str: (a: number, b: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_3: WebAssembly.Table;
export const __wbindgen_start: () => void;
