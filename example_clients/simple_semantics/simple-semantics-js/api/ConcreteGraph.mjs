// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const ConcreteGraph_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ConcreteGraph_destroy(ptr);
});

export class ConcreteGraph {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("ConcreteGraph is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            ConcreteGraph_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    static create() {

        const result = wasm.ConcreteGraph_create();

        try {
            return new ConcreteGraph(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    addNode(value) {

        const result = wasm.ConcreteGraph_add_node(this.ffiValue, value);

        try {
            return result;
        }

        finally {
        }
    }

    addEdge(from, to, value) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const valueSlice = diplomatRuntime.DiplomatBuf.str8(wasm, value);
    wasm.ConcreteGraph_add_edge(this.ffiValue, from, to, ...valueSlice.splat());

        try {}

        finally {
            functionCleanupArena.free();

        }
    }

    sayHi() {
    wasm.ConcreteGraph_say_hi(this.ffiValue);

        try {}

        finally {
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}