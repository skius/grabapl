// generated by diplomat-tool
import type { AbstractArgList } from "./AbstractArgList"
import type { AbstractNodeId } from "./AbstractNodeId"
import type { BuilderOpLike } from "./BuilderOpLike"
import type { BuiltinQuery } from "./BuiltinQuery"
import type { EdgeAbstract } from "./EdgeAbstract"
import type { IntermediateState } from "./IntermediateState"
import type { OpCtx } from "./OpCtx"
import type { OperationBuilderError } from "./OperationBuilderError"
import type { UserDefinedOperation } from "./UserDefinedOperation"
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";



export class OperationBuilder {
    /** @internal */
    get ffiValue(): pointer;
    /** @internal */
    constructor();


    static create(opCtx: OpCtx): OperationBuilder;

    expectParameterNode(marker: number): void;

    expectContextNode(marker: number): void;

    expectParameterEdge(src: number, dst: number, av: EdgeAbstract): void;

    startQuery(query: BuiltinQuery, args: AbstractArgList): void;

    enterTrueBranch(): void;

    enterFalseBranch(): void;

    startShapeQuery(queryName: string): void;

    endQuery(): void;

    expectShapeNode(nodeName: string): void;

    expectShapeEdge(src: AbstractNodeId, dst: AbstractNodeId, av: EdgeAbstract): void;

    addOperation(name: string | null, instruction: BuilderOpLike, args: AbstractArgList): void;

    show(): IntermediateState;

    finalize(opId: number): UserDefinedOperation;
}