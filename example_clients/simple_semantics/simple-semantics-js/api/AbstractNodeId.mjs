// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const AbstractNodeId_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.AbstractNodeId_destroy(ptr);
});

export class AbstractNodeId {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("AbstractNodeId is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            AbstractNodeId_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    get ffiValue() {
        return this.#ptr;
    }


    static newParameter(marker) {

        const result = wasm.AbstractNodeId_new_parameter(marker);

        try {
            return new AbstractNodeId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    static newFromOutput(opMarker, nodeMarker) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const opMarkerSlice = diplomatRuntime.DiplomatBuf.str8(wasm, opMarker);
        const nodeMarkerSlice = diplomatRuntime.DiplomatBuf.str8(wasm, nodeMarker);

        const result = wasm.AbstractNodeId_new_from_output(...opMarkerSlice.splat(), ...nodeMarkerSlice.splat());

        try {
            return new AbstractNodeId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
            functionCleanupArena.free();

        }
    }

    static newFromStr(aid) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const aidSlice = diplomatRuntime.DiplomatBuf.str8(wasm, aid);

        const result = wasm.AbstractNodeId_new_from_str(...aidSlice.splat());

        try {
            return new AbstractNodeId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
            functionCleanupArena.free();

        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}