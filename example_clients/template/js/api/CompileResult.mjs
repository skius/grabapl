// generated by diplomat-tool
import { Program } from "./Program.mjs"
import { StringError } from "./StringError.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const CompileResult_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.CompileResult_destroy(ptr);
});

/**
 * Represents the result of compiling a source file.
 *
 * The compilation may have failed, but there may still be valid intermediate states to print.
 * To check for errors and access the programs, call getProgram().
 */
export class CompileResult {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("CompileResult is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            CompileResult_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Returns the DOT representation of the intermediate state named `state`.
     */
    dotOfState(state) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const stateSlice = diplomatRuntime.DiplomatBuf.str8(wasm, state);
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.CompileResult_dot_of_state(this.ffiValue, ...stateSlice.splat(), write.buffer);

        try {
            return write.readString8();
        }

        finally {
            functionCleanupArena.free();

            write.free();
        }
    }

    /**
     * If the compilation was successful, this returns a `Program` that can be used to run operations.
     *
     * Otherwise, this throws an error.
     */
    getProgram() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.CompileResult_get_program(diplomatReceive.buffer, this.ffiValue);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new StringError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('StringError: ' + cause.toString(), { cause });
            }
            return new Program(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }

        finally {
            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}