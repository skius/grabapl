// generated by diplomat-tool
import { StringError } from "./StringError.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const ConcreteGraph_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ConcreteGraph_destroy(ptr);
});

/**
 * Represents a concrete graph, i.e., the runtime state of a program.
 */
export class ConcreteGraph {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("ConcreteGraph is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            ConcreteGraph_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a new empty concrete graph.
     */
    static create() {

        const result = wasm.ConcreteGraph_create();

        try {
            return new ConcreteGraph(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Returns the DOT representation of the concrete graph.
     */
    dot() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.ConcreteGraph_dot(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Adds a new node to the concrete graph with the given value and returns its key.
     */
    addNode(value) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const valueSlice = diplomatRuntime.DiplomatBuf.str8(wasm, value);
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.ConcreteGraph_add_node(diplomatReceive.buffer, this.ffiValue, ...valueSlice.splat());

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new StringError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('StringError: ' + cause.toString(), { cause });
            }
            return (new Uint32Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    /**
     * Adds an edge from the node with key `from` to the node with key `to` with the given value.
     */
    addEdge(from, to, value) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const valueSlice = diplomatRuntime.DiplomatBuf.str8(wasm, value);
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.ConcreteGraph_add_edge(diplomatReceive.buffer, this.ffiValue, from, to, ...valueSlice.splat());

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new StringError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('StringError: ' + cause.toString(), { cause });
            }
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}