// generated by diplomat-tool
import { CompileResult } from "./CompileResult.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const Grabapl_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Grabapl_destroy(ptr);
});

/**
 * Holds a bunch of top-level functions.
 */
export class Grabapl {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("Grabapl is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            Grabapl_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Call this function at the beginning of your program to initialize useful
     * Rust panic error messages.
     */
    static init() {
    wasm.Grabapl_init();

        try {}

        finally {
        }
    }

    /**
     * Parses a source file.
     */
    static parse(src) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const srcSlice = diplomatRuntime.DiplomatBuf.str8(wasm, src);

        const result = wasm.Grabapl_parse(...srcSlice.splat());

        try {
            return new CompileResult(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
            functionCleanupArena.free();

        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}