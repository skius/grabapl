// generated by diplomat-tool
import { OperationContext } from "./OperationContext.mjs"
import { StringError } from "./StringError.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const OperationBuilder_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.OperationBuilder_destroy(ptr);
});

/**
 * A user defined operation that is currently being built using low-level instructions instead of
 * parsing via the syntax parser.
 *
 * This builder should probably be used to create an interactive interface for building user defined operations.
 */
export class OperationBuilder {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    #aEdge = [];

    #internalConstructor(symbol, ptr, selfEdge, aEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("OperationBuilder is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#aEdge = aEdge;
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            OperationBuilder_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a new operation builder for the given operation context and with the given self operation ID.
     *
     * The passed operation context holds the other user defined operations that can be used in the builder.
     */
    static create(opCtx, selfOpId) {
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [opCtx];


        const result = wasm.OperationBuilder_create(opCtx.ffiValue, selfOpId);

        try {
            return new OperationBuilder(diplomatRuntime.internalConstructor, result, [], aEdges);
        }

        finally {
        }
    }

    /**
     * Adds an expected parameter node with the given name and type to the operation.
     */
    expectParameterNode(name, nodeType) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const nameSlice = diplomatRuntime.DiplomatBuf.str8(wasm, name);
        const nodeTypeSlice = diplomatRuntime.DiplomatBuf.str8(wasm, nodeType);
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.OperationBuilder_expect_parameter_node(diplomatReceive.buffer, this.ffiValue, ...nameSlice.splat(), ...nodeTypeSlice.splat());

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new StringError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('StringError: ' + cause.toString(), { cause });
            }
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge, aEdge) {
        return this.#internalConstructor(...arguments)
    }
}