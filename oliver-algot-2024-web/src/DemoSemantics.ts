/* Copyright 2022-2023 Theo Weidmann. All rights reserved. */
import {OperationId} from 'src/Operation';
import {ConcreteValue} from 'src/ConcreteValue';
import {NodeStyle} from 'src/NodeStyle';
import {ComparisonOperator} from 'features/editor/PredicateButton';

export type QueryId = string & {readonly brand?: unique symbol};
export type QueryApplicationId = string & {readonly brand?: unique symbol};
export type PatternId = string & {readonly brand?: unique symbol};

export interface QueryApplication {
  id: QueryApplicationId;
  query: OperationId;
  inputs: AbstractNodeDescriptor[];
}

export type AbstractNodeKey = string & {readonly brand?: unique symbol};
export type AbstractNodeDescriptor =
  | PatternMatchAbstractNodeDescriptor
  | OperationOutputAbstractNodeDescriptor
  | LiteralAbstractNodeDescriptor
  | UndefinedAbstractNodeDescriptor;

export interface PatternMatchAbstractNodeDescriptor {
  type: 'PatternMatch';
  pattern: PatternId;
}

const SEPARATOR = '|';

export function toOutputKey(indices: [...ActionId[], string]) {
  return indices.join(SEPARATOR);
}

export function fromOutputKey(key: string): [...ActionId[], string] {
  return key.split(SEPARATOR) as [...ActionId[], string];
}

export interface OperationOutputAbstractNodeDescriptor {
  type: 'OperationOutput';
  /**
   * Each output can be uniquely identified by an ID that is constructed based
   * on the exact "path" of the output in the operation call graph.
   * This key matches exactly the one generated by ${toOutputKey}.
   * @see GraphAPI#endAction
   * @see toOutputKey
   * @see fromOutputKey
   */
  // stores the action IDs of the call stack and the creating operation, separated by SEPARATOR
  id: string;
}

export interface LiteralAbstractNodeDescriptor {
  type: 'Literal';
  value: ConcreteValue;
}

export interface UndefinedAbstractNodeDescriptor {
  type: 'Undefined';
}

export type ActionId = string & {readonly brand?: unique symbol};

export interface Action {
  operation: OperationId;
  inputs: AbstractNodeDescriptor[];
  conditions: ActionCondition[];

  breakpoint?: boolean;

  id: ActionId;
}

export interface ActionCondition {
  queryApp: QueryApplicationId;
  result: boolean | ComparisonOperator;
}

export interface DemoSemantics {
  queryApplications: Record<QueryApplicationId, QueryApplication>;
  actions: Action[];
  outputNames: Record<ActionId, string>; // map action ID to output name
}

export interface Pattern {
  id: PatternId;
  name: string;
  incoming: PatternId[];
  outgoing: PatternId[];
  required?: boolean;
  style?: NodeStyle;
}
