{
    "en":{
        "instructions":{
            "instruction1":"Welcome to Algot!\n\nAlgot is a visual programming environment that makes it easy to create complex programs. Let's teach you how it works.",
            "instruction2":"In Algot, the entire program state is a graph. Right now, the graph contains a single node with the value 0.\n\nLet's create another node. Click on the 'New Node' operation to the right.",
            "instruction3":"Now, let's connect the two nodes. Click on the 'Add Edge To' operation to the right and then the two nodes.",
            "instruction4":"We now have a graph with a root node (top) and a leaf node (bottom). Both of them have the value 0.\n\nLet's assign the value 1 to the root. Click on 'Increment' and then select the root node. You can also first click on the node and then on the 'Increment' operation.",
            "instruction5":"Great! Let's now give the leaf node a sibling. Call 'Add Child' on the root.",
            "instruction6":"Not every graph in Algot is a tree. Let's demonstrate this.\n\nCall 'Add Edge To' on the two child nodes.",
            "instruction7":"If you want to, you can play more with the graph by adding more nodes and edges.\n\nWhen you're ready, we'll explore how to define our own operations.",
            "instruction8":"Click on 'New Operation' in the operations tab on the right to create a new operation.",
            "instruction9":"We will create an operation that adds two children to an input node.\n\nBut first, let's give the operation another name than 'New Operation'. Let's call it 'Add Twins'. To do this, just double-click on the function name in the section on the top left of the window.",
            "instruction10":"Next, we need to demonstrate the action. \n\nFirstly, the operation should have one input. Click on the 'Add Input' button on the right.",
            "instruction11":"We now have an input node with the name 'a'.\n\nSwitch to the 'Operations' tab (top right). Click on 'Add Child' and select the node 'a'.",
            "instruction12":"Let's do this again so that node 'a' has two children.",
            "instruction13":"Now exit the Demonstration View (click x near the top middle) and test the function. You can do this by selecting any node and then 'Add Twins'.\n\nWhen you're ready, click Next.",
            "instruction14":"Let's now define a conditional function. Create a new function and call it 'Conditional Decrement'.",
            "instruction15":"Let's enter the Demonstration View again and add an input, just like before. Then, do the following:\n\nGo to the 'Queries' tab on the top right, click 'Is Zero?' and then click the node 'a'. A query result panel will appear.",
            "instruction16":"Now, go back to the 'Operations' tab. Click the circled 'X' in the query result panel and call 'Decrement' on node 'a'. You'll notice that nothing happened, since the default value of an input node is 0. On the left-hand side, the action you created is greyed out.",
            "instruction17": "In the 'Patterns' tab on the right, you can change the input node's example value using the 'Change Example Value' action. Click on the operation and on the input node and set its value to something nonzero.",
            "instruction18": "Observe that on the left-hand side of the screen, the instruction is now shown in color to indicate that it has executed. Using the buttons on the bottom left of the screen or your arrow keys, you can step forward and backward in the execution of your operation.",
            "instruction19": "As before, you can enter the Playground to test the operation. Once you're ready, click 'Next'",
            "instruction20": "We'll now define an operation that uses Algot's pattern matching capabilities. In the playground, create a new node and add two children to it.",
            "instruction21": "Now, click on the root node and then on 'New Operation'.",
            "instruction22": "You'll notice that the operation automatically gets an input node in blue and two pink pattern-matched nodes. These nodes do not have to be explicitly passed as arguments when you execute an operation.",
            "instruction23": "Now, store the Sum of the children in the root by executing Sum using the two children and the sum as arguments.",
            "instruction24": "You can play around with the example values using the 'Change Example Value' instruction in the 'Patterns' tab and observe how this affects the outcome of the operation.",
            "instruction25": "As always, you can experiment with the operation in the playground. Also try out what happens if you pass a pattern that does not match the input pattern.",
            "instruction26": "That's all for now. Hopefully you understand the basic operations of Algot now.\n\nExercise: Try implementing the GCD and Dot Product Operations using recursion. On the left-hand side, there is a 'Tests' tab that you can use to test your implementations."
        },
        "hints": {
        }
    }
}
